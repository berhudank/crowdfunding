// app.js

const contractAddress = '0x5385B5B991e3bE9581A844dFffa0dBBcA18D8F76'; // Replace with your contract address
const bytecode = "0x60806040526002600e5534801561001557600080fd5b5060405161269b38038061269b8339818101604052810190610037919061026b565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836001819055508260038190555081600490816100949190610505565b506000600b60026101000a81548160ff02191690831515021790555080600c81905550505050506105d7565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6100e7816100d4565b81146100f257600080fd5b50565b600081519050610104816100de565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61015d82610114565b810181811067ffffffffffffffff8211171561017c5761017b610125565b5b80604052505050565b600061018f6100c0565b905061019b8282610154565b919050565b600067ffffffffffffffff8211156101bb576101ba610125565b5b6101c482610114565b9050602081019050919050565b60005b838110156101ef5780820151818401526020810190506101d4565b60008484015250505050565b600061020e610209846101a0565b610185565b90508281526020810184848401111561022a5761022961010f565b5b6102358482856101d1565b509392505050565b600082601f8301126102525761025161010a565b5b81516102628482602086016101fb565b91505092915050565b60008060008060808587031215610285576102846100ca565b5b6000610293878288016100f5565b94505060206102a4878288016100f5565b935050604085015167ffffffffffffffff8111156102c5576102c46100cf565b5b6102d18782880161023d565b92505060606102e2878288016100f5565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061034057607f821691505b602082108103610353576103526102f9565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103bb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261037e565b6103c5868361037e565b95508019841693508086168417925050509392505050565b6000819050919050565b60006104026103fd6103f8846100d4565b6103dd565b6100d4565b9050919050565b6000819050919050565b61041c836103e7565b61043061042882610409565b84845461038b565b825550505050565b600090565b610445610438565b610450818484610413565b505050565b5b818110156104745761046960008261043d565b600181019050610456565b5050565b601f8211156104b95761048a81610359565b6104938461036e565b810160208510156104a2578190505b6104b66104ae8561036e565b830182610455565b50505b505050565b600082821c905092915050565b60006104dc600019846008026104be565b1980831691505092915050565b60006104f583836104cb565b9150826002028217905092915050565b61050e826102ee565b67ffffffffffffffff81111561052757610526610125565b5b6105318254610328565b61053c828285610478565b600060209050601f83116001811461056f576000841561055d578287015190505b61056785826104e9565b8655506105cf565b601f19841661057d86610359565b60005b828110156105a557848901518255600182019150602085019450602081019050610580565b868310156105c257848901516105be601f8916826104cb565b8355505b6001600288020188555050505b505050505050565b6120b5806105e66000396000f3fe60806040526004361061012e5760003560e01c8063550fab86116100ab578063a541a2a21161006f578063a541a2a214610450578063c381177d1461047b578063c59ee1dc146104a4578063d6f8cfaa146104cf578063e455347b1461050c578063ed88c68e146105375761016e565b8063550fab861461036757806364a238c2146103a45780636ea481a2146103cf57806370207e81146103fa57806370740aab146104255761016e565b8063338cdca1116100f2578063338cdca1146102805780633852a2ec146102ab5780633cb5d100146102d65780634019388314610313578063462bcc391461033e5761016e565b8063132002fc146101a957806318a1afc3146101d457806319d40b08146101ff5780631f8922f31461022a57806329dcb0cf146102555761016e565b3661016e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610165906112e4565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a0906112e4565b60405180910390fd5b3480156101b557600080fd5b506101be610541565b6040516101cb919061131d565b60405180910390f35b3480156101e057600080fd5b506101e9610547565b6040516101f69190611353565b60405180910390f35b34801561020b57600080fd5b5061021461055a565b6040516102219190611353565b60405180910390f35b34801561023657600080fd5b5061023f61056d565b60405161024c919061131d565b60405180910390f35b34801561026157600080fd5b5061026a610573565b604051610277919061131d565b60405180910390f35b34801561028c57600080fd5b50610295610579565b6040516102a291906113ed565b60405180910390f35b3480156102b757600080fd5b506102c0610607565b6040516102cd919061131d565b60405180910390f35b3480156102e257600080fd5b506102fd60048036038101906102f8919061144f565b61060d565b60405161030a91906114bd565b60405180910390f35b34801561031f57600080fd5b5061032861064c565b604051610335919061131d565b60405180910390f35b34801561034a57600080fd5b506103656004803603810190610360919061160d565b610652565b005b34801561037357600080fd5b5061038e60048036038101906103899190611682565b61075e565b60405161039b9190611353565b60405180910390f35b3480156103b057600080fd5b506103b961077e565b6040516103c69190611353565b60405180910390f35b3480156103db57600080fd5b506103e4610791565b6040516103f1919061131d565b60405180910390f35b34801561040657600080fd5b5061040f610797565b60405161041c919061131d565b60405180910390f35b34801561043157600080fd5b5061043a61079d565b60405161044791906113ed565b60405180910390f35b34801561045c57600080fd5b5061046561082b565b60405161047291906114bd565b60405180910390f35b34801561048757600080fd5b506104a2600480360381019061049d91906116db565b61084f565b005b3480156104b057600080fd5b506104b9610b68565b6040516104c6919061131d565b60405180910390f35b3480156104db57600080fd5b506104f660048036038101906104f19190611682565b610b6e565b604051610503919061131d565b60405180910390f35b34801561051857600080fd5b50610521610b86565b60405161052e9190611353565b60405180910390f35b61053f610b99565b005b600c5481565b600b60039054906101000a900460ff1681565b600b60019054906101000a900460ff1681565b600d5481565b60035481565b6005805461058690611737565b80601f01602080910402602001604051908101604052809291908181526020018280546105b290611737565b80156105ff5780601f106105d4576101008083540402835291602001916105ff565b820191906000526020600020905b8154815290600101906020018083116105e257829003601f168201915b505050505081565b600e5481565b600a818154811061061d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d7906117b4565b60405180910390fd5b600b60009054906101000a900460ff1615610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072790611846565b60405180910390fd5b806005908161073f9190611a12565b506001600b60006101000a81548160ff02191690831515021790555050565b60096020528060005260406000206000915054906101000a900460ff1681565b600b60009054906101000a900460ff1681565b60075481565b60065481565b600480546107aa90611737565b80601f01602080910402602001604051908101604052809291908181526020018280546107d690611737565b80156108235780601f106107f857610100808354040283529160200191610823565b820191906000526020600020905b81548152906001019060200180831161080657829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60029054906101000a900460ff161561089f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089690611b30565b60405180910390fd5b600b60039054906101000a900460ff1680156108c75750600b60009054906101000a900460ff165b610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd90611bc2565b60405180910390fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097f90611c2e565b60405180910390fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0c90611c9a565b60405180910390fd5b6001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508015610a905760066000815480929190610a8690611ce9565b9190505550610aa9565b60076000815480929190610aa390611ce9565b91905055505b6002600a80549050610abb9190611d60565b6006541115610aec576001600b60016101000a81548160ff021916908315150217905550610ae7610e61565b610b65565b600a80549050600754600654610b029190611d91565b03610b1457610b0f610f71565b610b64565b600c54600d54610b249190611d91565b4210610b63576000600e5403610b4157610b3c610f71565b610b62565b600e6000815480929190610b5490611dc5565b9190505550610b61611169565b5b5b5b5b50565b60025481565b60086020528060005260406000206000915090505481565b600b60029054906101000a900460ff1681565b600b60029054906101000a900460ff16158015610bc35750600b60039054906101000a900460ff16155b610c02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf990611e3a565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8790611ea6565b60405180910390fd5b6003544210610cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccb90611f12565b60405180910390fd5b60003411610d17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0e90611f7e565b60405180910390fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610dc257600a339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b34600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e119190611d91565b925050819055503460026000828254610e2a9190611d91565b9250508190555060015460025410610e5f576001600b60036101000a81548160ff02191690831515021790555042600d819055505b565b6001600b60026101000a81548160ff0219169083151502179055506000600b60006101000a81548160ff02191690831515021790555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600254604051610ee090611fcf565b60006040518083038185875af1925050503d8060008114610f1d576040519150601f19603f3d011682016040523d82523d6000602084013e610f22565b606091505b5050905080610f66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5d90612030565b60405180910390fd5b600060028190555050565b6001600b60026101000a81548160ff02191690831515021790555060005b600a8054905081101561112e576000600a8281548110610fb257610fb1612050565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111561111f576000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008273ffffffffffffffffffffffffffffffffffffffff168260405161109790611fcf565b60006040518083038185875af1925050503d80600081146110d4576040519150601f19603f3d011682016040523d82523d6000602084013e6110d9565b606091505b505090508061111d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111490612030565b60405180910390fd5b505b50508080600101915050610f8f565b50600a600061113d9190611249565b600660009055600b60006101000a81549060ff0219169055600b60016101000a81549060ff0219169055565b6000600b60006101000a81548160ff021916908315150217905550600060068190555060005b600a8054905081101561123f57600060096000600a84815481106111b6576111b5612050565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808060010191505061118f565b5042600d81905550565b5080546000825590600052602060002090810190611267919061126a565b50565b5b8082111561128357600081600090555060010161126b565b5090565b600082825260208201905092915050565b7f4469726563745472616e736665724e6f74416c6c6f7765640000000000000000600082015250565b60006112ce601883611287565b91506112d982611298565b602082019050919050565b600060208201905081810360008301526112fd816112c1565b9050919050565b6000819050919050565b61131781611304565b82525050565b6000602082019050611332600083018461130e565b92915050565b60008115159050919050565b61134d81611338565b82525050565b60006020820190506113686000830184611344565b92915050565b600081519050919050565b60005b8381101561139757808201518184015260208101905061137c565b60008484015250505050565b6000601f19601f8301169050919050565b60006113bf8261136e565b6113c98185611287565b93506113d9818560208601611379565b6113e2816113a3565b840191505092915050565b6000602082019050818103600083015261140781846113b4565b905092915050565b6000604051905090565b600080fd5b600080fd5b61142c81611304565b811461143757600080fd5b50565b60008135905061144981611423565b92915050565b60006020828403121561146557611464611419565b5b60006114738482850161143a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114a78261147c565b9050919050565b6114b78161149c565b82525050565b60006020820190506114d260008301846114ae565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61151a826113a3565b810181811067ffffffffffffffff82111715611539576115386114e2565b5b80604052505050565b600061154c61140f565b90506115588282611511565b919050565b600067ffffffffffffffff821115611578576115776114e2565b5b611581826113a3565b9050602081019050919050565b82818337600083830152505050565b60006115b06115ab8461155d565b611542565b9050828152602081018484840111156115cc576115cb6114dd565b5b6115d784828561158e565b509392505050565b600082601f8301126115f4576115f36114d8565b5b813561160484826020860161159d565b91505092915050565b60006020828403121561162357611622611419565b5b600082013567ffffffffffffffff8111156116415761164061141e565b5b61164d848285016115df565b91505092915050565b61165f8161149c565b811461166a57600080fd5b50565b60008135905061167c81611656565b92915050565b60006020828403121561169857611697611419565b5b60006116a68482850161166d565b91505092915050565b6116b881611338565b81146116c357600080fd5b50565b6000813590506116d5816116af565b92915050565b6000602082840312156116f1576116f0611419565b5b60006116ff848285016116c6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061174f57607f821691505b60208210810361176257611761611708565b5b50919050565b7f4e6f7450726f6a65637443726561746f72000000000000000000000000000000600082015250565b600061179e601183611287565b91506117a982611768565b602082019050919050565b600060208201905081810360008301526117cd81611791565b9050919050565b7f57616974696e6720666f722074686520766f74696e6720726573756c7473206f60008201527f66207468652070726576696f7573207265717565737400000000000000000000602082015250565b6000611830603683611287565b915061183b826117d4565b604082019050919050565b6000602082019050818103600083015261185f81611823565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026118c87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261188b565b6118d2868361188b565b95508019841693508086168417925050509392505050565b6000819050919050565b600061190f61190a61190584611304565b6118ea565b611304565b9050919050565b6000819050919050565b611929836118f4565b61193d61193582611916565b848454611898565b825550505050565b600090565b611952611945565b61195d818484611920565b505050565b5b818110156119815761197660008261194a565b600181019050611963565b5050565b601f8211156119c65761199781611866565b6119a08461187b565b810160208510156119af578190505b6119c36119bb8561187b565b830182611962565b50505b505050565b600082821c905092915050565b60006119e9600019846008026119cb565b1980831691505092915050565b6000611a0283836119d8565b9150826002028217905092915050565b611a1b8261136e565b67ffffffffffffffff811115611a3457611a336114e2565b5b611a3e8254611737565b611a49828285611985565b600060209050601f831160018114611a7c5760008415611a6a578287015190505b611a7485826119f6565b865550611adc565b601f198416611a8a86611866565b60005b82811015611ab257848901518255600182019150602085019450602081019050611a8d565b86831015611acf5784890151611acb601f8916826119d8565b8355505b6001600288020188555050505b505050505050565b7f46756e6472616973696e672068617320656e6465640000000000000000000000600082015250565b6000611b1a601583611287565b9150611b2582611ae4565b602082019050919050565b60006020820190508181036000830152611b4981611b0d565b9050919050565b7f566f74696e67206861736e2774207374617274656420796574206f722074686560008201527f7265206973206e6f207370656e64696e67207265717565737420796574000000602082015250565b6000611bac603d83611287565b9150611bb782611b50565b604082019050919050565b60006020820190508181036000830152611bdb81611b9f565b9050919050565b7f596f75206d75737420636f6e7472696275746520746f20766f74650000000000600082015250565b6000611c18601b83611287565b9150611c2382611be2565b602082019050919050565b60006020820190508181036000830152611c4781611c0b565b9050919050565b7f596f75206861766520616c726561647920766f74656400000000000000000000600082015250565b6000611c84601683611287565b9150611c8f82611c4e565b602082019050919050565b60006020820190508181036000830152611cb381611c77565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611cf482611304565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d2657611d25611cba565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d6b82611304565b9150611d7683611304565b925082611d8657611d85611d31565b5b828204905092915050565b6000611d9c82611304565b9150611da783611304565b9250828201905080821115611dbf57611dbe611cba565b5b92915050565b6000611dd082611304565b915060008203611de357611de2611cba565b5b600182039050919050565b7f436f6e7472616374206973206e6f206c6f6e6765722070617961626c65000000600082015250565b6000611e24601d83611287565b9150611e2f82611dee565b602082019050919050565b60006020820190508181036000830152611e5381611e17565b9050919050565b7f43726561746f722063616e6e6f7420646f6e6174650000000000000000000000600082015250565b6000611e90601583611287565b9150611e9b82611e5a565b602082019050919050565b60006020820190508181036000830152611ebf81611e83565b9050919050565b7f446561646c696e65206861732070617373656400000000000000000000000000600082015250565b6000611efc601383611287565b9150611f0782611ec6565b602082019050919050565b60006020820190508181036000830152611f2b81611eef565b9050919050565b7f446f6e6174696f6e206d7573742062652067726561746572207468616e203000600082015250565b6000611f68601f83611287565b9150611f7382611f32565b602082019050919050565b60006020820190508181036000830152611f9781611f5b565b9050919050565b600081905092915050565b50565b6000611fb9600083611f9e565b9150611fc482611fa9565b600082019050919050565b6000611fda82611fac565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b600061201a601483611287565b915061202582611fe4565b602082019050919050565b600060208201905081810360008301526120498161200d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220da12f20d95a2997a66d66a5a5fe34389f6ae0eda5233a51f79704bd129c2f65564736f6c634300081c0033"

const abi = [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_purpose",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_votingDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "approvalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contributors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contributorsToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contributorsToVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_details",
          "type": "string"
        }
      ],
      "name": "createSpendingRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disapprovalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "goal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasVotingStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isFundingEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRequestReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxVotingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purpose",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raisedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "request",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVotingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_approve",
          "type": "bool"
        }
      ],
      "name": "voteOnSpending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ];

let provider;
let signer;
let contract;
let userAddress;

async function init() {
  if (window.ethereum) {
    await getAndSetSigner();
    window.ethereum.on('accountsChanged', getAndSetSigner);
  } else {
    alert("Please install MetaMask or another Ethereum wallet.");
  }
}

async function getAndSetSigner() {
    await window.ethereum.request({method: "eth_requestAccounts"})
    provider = new ethers.providers.Web3Provider(window.ethereum);
    // Request account access if needed
    signer = provider.getSigner();
    // Get the user's account address
    userAddress = await signer.getAddress();
    document.getElementById('account').textContent = userAddress;
}

async function fetchStateVariable(variable) {
    try {
        let result;
    
        // Check if the variable requires user input
        if (variable === 'contributor') {
          // Prompt the user for an index
          const index = prompt('Enter the index of the contributor:');
          if (index === null || index.trim() === '' || isNaN(index) || parseInt(index) < 0) {
            alert('Invalid index. Please enter a valid non-negative number.');
            return;
          }
    
          // Fetch the contributor at the specified index
          result = await contract.contributors(parseInt(index));
          alert(`Contributor at index ${index}: ${result}`);
        } else if (variable === "deadline") {
            result = await contract[variable]();
            const deadlineDate = new Date(result.toNumber() * 1000); // Convert UNIX timestamp to JavaScript Date
            document.getElementById(variable).textContent = deadlineDate.toLocaleString(); // Format the date for display 
        }else {
          // Fetch the state variable directly for other cases
          result = await contract[variable]();
          
          // Convert values from Wei to Ether for specific fields
          if (variable === 'goal' || variable === 'raisedAmount') {
            result = ethers.utils.formatEther(result);
          }
          
          // Display the result
          document.getElementById(variable).textContent = result;
        }
      } catch (error) {
        console.error(`Error fetching ${variable}:`, error);
        alert(`There was an error fetching ${variable}.`);
      }
}

async function donate() {
    getAndSetSigner();
  const donationAmount = prompt("Enter donation amount in ETH:");
  const tx = await contract.donate({ value: ethers.utils.parseEther(donationAmount) });
  await tx.wait();
  alert("Donation successful!");
}

async function createRequest() {
    getAndSetSigner();
    try {
      const requestDetails = prompt("Enter the details for the spending request:");
      if (!requestDetails) {
        alert("Request details cannot be empty.");
        return;
      }
  
      const tx = await contract.createSpendingRequest(requestDetails);
      await tx.wait();
      alert("Spending request created successfully!");
    } catch (error) {
      console.error("Error creating spending request:", error);
      alert("There was an error creating the spending request.");
    }
  }

  async function voteOnSpending() {
    getAndSetSigner();
    try {
      const vote = confirm("Do you approve the spending request?");
      const tx = await contract.voteOnSpending(vote);
      await tx.wait();
  
      const voteResult = vote ? "approved" : "rejected";
      alert(`You have successfully ${voteResult} the spending request.`);
    } catch (error) {
      console.error("Error voting on spending request:", error);
      alert("There was an error casting your vote.");
    }
  }

// Add event listeners for fetching contract variables
document.getElementById('fetchCreatorButton').addEventListener('click', () => fetchStateVariable('projectCreator'));
document.getElementById('fetchGoalButton').addEventListener('click', () => fetchStateVariable('goal'));
document.getElementById('fetchRaisedAmountButton').addEventListener('click', () => fetchStateVariable('raisedAmount'));
document.getElementById('fetchDeadlineButton').addEventListener('click', () => fetchStateVariable('deadline'));
document.getElementById('fetchPurposeButton').addEventListener('click', () => fetchStateVariable('purpose'));
document.getElementById('fetchRequestButton').addEventListener('click', () => fetchStateVariable('request'));
document.getElementById('fetchApprovalVotesButton').addEventListener('click', () => fetchStateVariable('approvalVotes'));
document.getElementById('fetchDisapprovalVotesButton').addEventListener('click', () => fetchStateVariable('disapprovalVotes'));
document.getElementById('fetchContributorButton').addEventListener('click', () => fetchStateVariable('contributor'));
document.getElementById('fetchIsRequestReadyButton').addEventListener('click', () => fetchStateVariable('isRequestReady'));
document.getElementById('fetchApprovedButton').addEventListener('click', () => fetchStateVariable('approved'));
document.getElementById('fetchIsFundingEndedButton').addEventListener('click', () => fetchStateVariable('isFundingEnded'));
document.getElementById('fetchHasVotingStartedButton').addEventListener('click', () => fetchStateVariable('hasVotingStarted'));

document.getElementById('donateButton').addEventListener('click', donate);
document.getElementById('createRequestButton').addEventListener('click', createRequest);
document.getElementById('voteButton').addEventListener('click', voteOnSpending);




async function createContract() {
    getAndSetSigner(); // Ensure the signer is set
    try {
      // Get the input values from the form
      const goal = document.getElementById('goalInput').value;
      const deadlineDate = document.getElementById('deadlineInput').value;
      const purpose = document.getElementById('purposeInput').value;
      const votingDuration = document.getElementById('votingDurationInput').value;
  
      if (!goal || !deadlineDate || !purpose || !votingDuration) {
        alert("All fields are required to create a contract.");
        return;
      }
  
      // Parse values as required for contract creation
      const parsedGoal = ethers.utils.parseEther(goal);

      // Validate deadline
    const currentDate = new Date();
    const selectedDate = new Date(deadlineDate);
    const minDeadline = new Date(currentDate.getTime() + 24 * 60 * 60 * 1000); // 1 day later

    if (selectedDate < minDeadline) {
      alert('Deadline must be at least 1 day later than the current date.');
      return;
    }

    // Convert inputs
    const deadlineTimestamp = Math.floor(selectedDate.getTime() / 1000); // Convert date to UNIX timestamp


      const parsedVotingDuration = parseInt(votingDuration, 10);
  
      // Deploy a new instance of the contract
      const ContractFactory = new ethers.ContractFactory(abi, bytecode, signer); // Replace `bytecode` with your contract's bytecode
      const newContract = await ContractFactory.deploy(parsedGoal, deadlineTimestamp, purpose, parsedVotingDuration);
      
      // Wait for the transaction to be mined
      await newContract.deployed();
  
      alert(`Contract successfully deployed at address: ${newContract.address}`);
    } catch (error) {
      console.error("Error creating contract:", error);
      alert("Failed to create the contract. Check console for details.");
    }
  }
  
  // Attach event listener to the form
  document.getElementById('createContractForm').addEventListener('submit', async (event) => {
    event.preventDefault(); // Prevent default form submission
    await createContract();
  });


  // Dynamically set the contract address
async function setContract() {
    const address = document.getElementById("contractAddressInput").value.trim();
    
    if (!ethers.utils.isAddress(address)) {
      alert("Invalid contract address. Please enter a valid Ethereum address.");
      return;
    }
  
    try {
      // Initialize the contract
      contract = new ethers.Contract(address, abi, signer);
  
      // Fetch and display initial contract information if needed
      const creator = await contract.projectCreator();
      // Get all the <span> elements within the 'contractInfoDiv'
        const spans = document.getElementById('contractInfoDiv').getElementsByTagName('span');

        // Loop through all <span> elements and clear their content
        for (let i = 0; i < spans.length; i++) {
            spans[i].innerText = '';
        }
      document.getElementById("projectCreator").textContent = creator;
  
      alert(`Contract successfully set to: ${address}`);
    } catch (error) {
      console.error("Error initializing contract:", error);
      alert("Failed to connect to the contract. Please check the address and try again.");
    }
  }
  
  // Event listener for setting the contract
  document.getElementById("setContractButton").addEventListener("click", setContract);
  

// Initialize the app
init();